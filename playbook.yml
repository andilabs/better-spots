---

- hosts: all
  vars:
    packages:
      - python
      - python3
      - python-pip
      - python-virtualenv
      - vim
      - binutils
      - tree
      - language-pack-pl
      - postgresql-client

    web_base_dir: '/home/ubuntu/mbf'
    media_dir: '/mbf/media'
    project_dir: '/mbf'
    project_instance: 'dogspot'

  gather_facts: no
  pre_tasks:

    - name: 'install python2'
      raw: sudo apt-get -y install python

  tasks:

  - name: Install packages
    sudo: yes
    apt: pkg={{ item }} state=present update_cache=yes
    with_items: "{{ packages }}"

  - name: Add the PostgreSQL public GPG key to the apt repo
    sudo: yes
    apt_key: url=https://www.postgresql.org/media/keys/ACCC4CF8.asc
             state=present

  - name: Add PostgreSQL to the sources list
    sudo: yes
    apt_repository: repo='deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main'
                    update_cache=yes
                    state=present

  - name: Install PostgreSQL
    sudo: yes
    apt: name={{ item }} update_cache=yes state=installed
    with_items:
      - postgresql
      - postgresql-contrib
      - postgresql-9.6-postgis-scripts #TODO make it postgres version parametrized
      - python-psycopg2
    tags: packages

  - name: Ensure the PostgreSQL service is running
    service: name=postgresql state=started enabled=yes

  - name: Ensure database is created
    become_user: postgres
    become: yes
    postgresql_db: name='mbf'
                   encoding='UTF-8'
                   lc_collate='en_US.UTF-8'
                   lc_ctype='en_US.UTF-8'
                   template='template0'
                   state=present

  - name: Ensure user has access to the database
    become_user: postgres
    become: yes
    postgresql_user: db='mbf'
                     name='mbf'
                     password='1234'
                     priv=ALL
                     state=present

  - name: Ensure user does not have unnecessary privileges
    become_user: postgres
    become: yes
    postgresql_user: name='mbf'
                     role_attr_flags=NOSUPERUSER,NOCREATEDB
                     state=present

  - name: Add postgis extension
    become_user: postgres
    become: yes
    postgresql_ext:
      name: postgis
      db: mbf

  - name: Add hstore extension
    become_user: postgres
    become: yes
    postgresql_ext:
      name: hstore
      db: mbf

  - name: Create media directories
    sudo: yes
    file: path="{{ item }}" state=directory
    with_items:
      - "{{ media_dir }}/img"

  - name: create virtualenv for python 3.5
    sudo: yes
    command: creates={{ web_base_dir }}/venv virtualenv -p python3.5 {{ web_base_dir }}/venv

  - name: install pip packages
    sudo: yes
    pip: virtualenv={{ web_base_dir }}/venv
         requirements=/mbf/requirements.txt

  - name: run database migrations
    shell: "{{ web_base_dir }}/venv/bin/python manage.py migrate --noinput"
    args:
      chdir: "{{ project_dir }}"
      executable: /bin/bash

  - name: load spots data fixtures for dogspot
    shell: "{{ web_base_dir }}/venv/bin/python manage.py loaddata data/{{project_instance}}/spots.json"
    args:
      chdir: "{{ project_dir }}"
      executable: /bin/bash
    # TODO some tag or other magic should determine it won't happen on production instance

  - name: copy images for spots from fixtures
    copy: src={{ item.src }} dest={{ item.dest }}
    with_items:
      - { src: 'data/{{project_instance}}/initial_img/', dest: "{{ media_dir }}/img" }

#  - name: activate virtualenv
#    become_user: ubuntu
#    become: yes
#    shell: "source {{ web_base_dir }}/venv/bin/activate"
#    args:
#      chdir: "{{ project_dir }}"
#      executable: /bin/bash

  - name: create superuser
    shell: "{{ web_base_dir }}/venv/bin/python manage.py create_andi"
    args:
      chdir: "{{ project_dir }}"
      executable: /bin/bash

  - name: create instance
    shell: "{{ web_base_dir }}/venv/bin/python manage.py create_instance"
    args:
      chdir: "{{ project_dir }}"
      executable: /bin/bash


  # TODO setup git

  # TODO handle passwords and other secret data, like api keys right

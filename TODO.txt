TODO:

- by addding the spot determine its lat, lng via Google Maps API  based on street, street #, city

- use the fonts locally!

- deploy to AMAZON ec2

- implement Python SOCIAL AUTH (facebook, twitter, google)

- add field is_certificated, which values is determined based on predicates, which are checked after each Ratings save (via post_save signal)

- switch to SASS

- get rid of bootstrap-django, to be independent from any changes in this django library

- javascript map - implement it using MVC, and OO-techniques

- define rules for showing only the best spots when being on certian zoom level

- consider following implementation:
	--- instead of class UserSpotList add to DogSpotUser class following (M2M) fields:

	favorite_spots = models.ManyToManyField(Spot, related_name='favorites_spots')
	to_be_visisted_spots = models.ManyToManyField(Spot, related_name='to_be_visited_spots')


- switch to postgres & postgis instead of MySQL and use model fields from geodjango package in Spot class. When done use in nearby_spots radius filtering insted off raw sql query using haversine.


- consider following muliple app design:
		(accounts, common, spots, api, ratings, geoutils, dogs)

		accounts
		--users
		--dogs
		--emailverification
		--[NOT ACCTUAL]userspotlist --inheritance (favorite, tobevisited)

		common
		--geoutils
		--qrcodes
		--vcards

		spots
		--spot
		--ratings
		--opinion
		--opinionusefulnessrating

		api

- implementation:
		-- adding new spots via form and from Map
		-- api adding new spot with GooglePlaces-enhanced-nearby-search

		-- rating + reviewing of spots
		-- up|down vote for comments

- extend REST API
		-- post/put -of files (images) in base64 and HTTP multipart
		-- check either authtoken is working right
		-- design authktoken to work with third party login from social auth


- create development environment being 1:1 as much as possible to ec2 using vagrant, salt, apache, mod_wsgi.

- internationalization using i18n


DONE:

- mapa - ładowanie spotów, gdy user przemieszcza się po mapie (on demand)
- przepisac logike mapy do coffee
- strony certificated
- qrcody
- vcardy
- filtrowanie pobranych spotów w JS
- wyszukiwarka ajaxowa
		(jquery autocomplete z grupowaniem wg rodzaju spotu)
- zmiana logiki friendly_rate i dogs_allowed - po kazdym safie przelicz i utrwal w Spocie w pojedynczym polu a nie jak teraz property liczone na kazde żądanie (signal, post_save na Ratingu)
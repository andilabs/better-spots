// Generated by CoffeeScript 1.9.0
(function() {
  var calculateDistance, checkIfEmpty, checkIfNewSpotsShouldBeLoaded, check_cookies, currentMapCenter, currentZoomLevel, desiredRadius, filterSpots, filters_allowance, filters_types, hideAllInfoWindows, loadMarkers, opts, spot_type_lookup, switchColumsClasses, zoomBasedIconScaleRatio,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  opts = {
    lines: 13,
    length: 29,
    width: 10,
    radius: 26,
    corners: 0.7,
    rotate: 0,
    direction: 1,
    color: "#000",
    speed: 1.6,
    trail: 72,
    shadow: false,
    hwaccel: false,
    className: "spinner",
    zIndex: 2e9
  };

  spot_type_lookup = {
    1: "caffe",
    2: "restaurant",
    3: "store",
    4: "institution",
    5: "pet store",
    6: "park",
    7: "bar",
    8: "art gallery or museum",
    9: "veterinary care",
    0: "hotel"
  };

  window.arrMarkers = {};

  filters_allowance = {
    "is_enabled": true,
    "is_not_enabled": true
  };

  filters_types = {
    "caffe": true,
    "restaurant": true,
    "veterinary_care": true
  };

  desiredRadius = 2000;

  currentMapCenter = {
    lat: null,
    lng: null
  };

  currentZoomLevel = 14;

  Number.prototype.getRatioForZoom = function() {
    return 591657550.5 / Math.pow(2, this - 1);
  };

  check_cookies = function() {
    var k, v, _results;
    for (k in filters_allowance) {
      v = filters_allowance[k];
      if ($.cookie(k)) {
        filters_allowance[k] = eval($.cookie(k));
      }
    }
    _results = [];
    for (k in filters_types) {
      v = filters_types[k];
      if ($.cookie(k)) {
        _results.push(filters_types[k] = eval($.cookie(k)));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Number.prototype.toRad = function() {
    return this * (Math.PI / 180);
  };

  zoomBasedIconScaleRatio = function() {
    if (currentZoomLevel >= 15) {
      return 1.0;
    }
    if (currentZoomLevel >= 12) {
      return 1.5;
    } else {
      return 2.0;
    }
  };

  calculateDistance = function(current_lat, current_lng, new_position_lat, new_position_lng) {

    /** returns distance in KM between two geoLocations represented by pair (lat, lng) */
    var R, a, c, d, dLat, dLon;
    R = 6371;
    dLat = (new_position_lat - current_lat).toRad();
    dLon = (new_position_lng - current_lng).toRad();
    current_lat = current_lat.toRad();
    new_position_lat = new_position_lat.toRad();
    a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(current_lat) * Math.cos(new_position_lat);
    c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return d = R * c;
  };

  checkIfNewSpotsShouldBeLoaded = function(new_position_lat, new_position_lng, user_zoom_level) {
    var current_lat, current_lng, distance, _ref;
    _ref = [currentMapCenter.lat, currentMapCenter.lng], current_lat = _ref[0], current_lng = _ref[1];
    distance = calculateDistance(current_lat, current_lng, new_position_lat, new_position_lng);
    if (distance > desiredRadius / 1000 || currentZoomLevel !== user_zoom_level) {
      return true;
    } else {
      return false;
    }
  };

  checkIfEmpty = function() {
    var box;
    if ($("#spots_list span.list-group-item:visible").not("#memo_empty").size() === 0) {
      box = $("<span class='list-group-item disabled' id='memo_empty'> <h4 class='list-group-item-heading'>No spots to show</h4> <p class='list-group-item-text'> Try using filters and zoom out to find some spots </p></span>");
      if ($("#spots_list span#memo_empty").size() === 0) {
        return $("#spots_list").append(box);
      }
    } else {
      return $("span#memo_empty").remove();
    }
  };

  hideAllInfoWindows = function() {
    return $('#map_canvas').gmap('closeInfoWindow');
  };

  filterSpots = function() {
    var filtered_allowance, filtered_types, k, v;
    filtered_allowance = ['current_location'];
    if (filters_allowance["is_not_enabled"] === true) {
      filtered_allowance.push(false);
    }
    if (filters_allowance["is_enabled"] === true) {
      filtered_allowance.push(true);
    }
    filtered_types = ['current_location'];
    for (k in filters_types) {
      v = filters_types[k];
      if (v === true) {
        filtered_types.push(k);
      }
    }
    $('#map_canvas').gmap('find', 'markers', {
      'property': 'is_enabled',
      'value': filtered_allowance
    }, function(marker, found) {
      return marker.setVisible(found);
    });
    $('#map_canvas').gmap('find', 'markers', {
      'property': 'spot_type',
      'value': filtered_types
    }, function(marker, found) {
      if (marker.visible !== false) {
        marker.setVisible(found);
      }
      return hideAllInfoWindows();
    });
    return $("#spots_list span.list-group-item").not("#memo_empty").each(function() {
      var _ref, _ref1;
      if ((_ref = $(this).data("markerek").is_enabled, __indexOf.call(filtered_allowance, _ref) < 0) || (_ref1 = spot_type_lookup[$(this).data("markerek").spot_type], __indexOf.call([
        (function() {
          var _results;
          _results = [];
          for (k in filters_types) {
            v = filters_types[k];
            if (v === true) {
              _results.push(k);
            }
          }
          return _results;
        })()
      ][0], _ref1) < 0)) {
        return $(this).hide();
      } else {
        return $(this).show();
      }
    });
  };

  switchColumsClasses = function(left, right) {
    $(left).removeClass('col-md-3').addClass('col-md-9 no-col-padding');
    return $(right).removeClass('col-md-9 no-col-padding').addClass('col-md-3');
  };

  loadMarkers = function(lat, lng) {
    var jqxhr, spinner, target, url;
    target = document.getElementById("right_container");
    spinner = new Spinner(opts).spin(target);
    window.arrMarkers = {};
    $('#map_canvas').gmap('clear', 'markers');
    url = BASE_HOST + ("/api/nearby/" + (lat.toFixed(5)) + "/" + (lng.toFixed(5)) + "/" + desiredRadius);
    return jqxhr = $.getJSON(url, function(data) {
      var k, marker, _ref;
      $.each(data.results, function(i, marker) {
        var SpotIcon, SpotInfoWindow, SpotMarker, box, contentOfInfoWindow, icony_allowed, rating_stars;
        box = $("<span class='list-group-item' id='" + marker.id + "'> <span class='badge' style='background-color:transparent'> <a href='" + marker.url + "' class='spot-details-link disabled' style='color:white'> <i class='fa fa-angle-double-right fa-2x'></i></a></span> <h4 class='list-group-item-heading'>" + marker.name + "</h4> <p class='list-group-item-text'>" + marker.address_street + " " + marker.address_number + " <span class='spot_item_details' id='" + marker.id + "'> <br><span class='glyphicon glyphicon-phone-alt'></span> " + marker.phone_number + " <a href='http://www.facebook.com/" + marker.facebook + "' target='_blank'> <i class='fa fa-facebook'></i></a> </span> </p></span>").data("markerek", marker);
        rating_stars = $("<div class='rate' id='" + marker.id + "'></div>").raty({
          readOnly: false,
          score: marker.friendly_rate
        });
        contentOfInfoWindow = $("<div class='spot_info' id='" + marker.id + "'> <h4>" + marker.name + "</h4><br> " + marker.address_street + " " + marker.address_number + "</div>").append(rating_stars)[0];
        icony_allowed = {
          "true": ICON_URL + "marker-ok.png",
          "false": ICON_URL + "marker-bad.png"
        };
        SpotIcon = {
          url: icony_allowed[marker.is_enabled],
          size: null,
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(0, 0),
          scaledSize: new google.maps.Size(30 / zoomBasedIconScaleRatio(), 30 / zoomBasedIconScaleRatio())
        };
        SpotMarker = new google.maps.Marker({
          position: new google.maps.LatLng(marker.location.latitude, marker.location.longitude),
          bounds: false,
          id: marker.id,
          is_enabled: [marker.is_enabled],
          spot_type: [spot_type_lookup[marker.spot_type]],
          icon: SpotIcon
        });
        SpotInfoWindow = new google.maps.InfoWindow({
          content: contentOfInfoWindow
        });
        return window.arrMarkers[marker.id] = {
          marker: SpotMarker,
          info_window: SpotInfoWindow,
          box: box
        };
      });
      spinner.stop();
      $("#map_canvas").animate({
        "opacity": "1.0"
      }, "slow");
      $("#filters_map_overlay").animate({
        "opacity": "1.0"
      }, "slow");
      $("#spots_list").empty();
      _ref = window.arrMarkers;
      for (k in _ref) {
        marker = _ref[k];
        $("#spots_list").append(marker.box);
        $("#map_canvas").gmap("addMarker", marker.marker).click(function() {
          var id;
          $("#map_canvas").gmap("get", "map").panTo(this.getPosition());
          $("#map_canvas").gmap("openInfoWindow", {
            position: this.getPosition(),
            content: arrMarkers[this.id].info_window.content
          });
          id = this.id;
          $("#spots_list span").not("#" + id).removeClass("active");
          $("#spots_list").find("#" + id).addClass("active");
          return $("#spots_list").scrollTop($("#spots_list").scrollTop() + $("#spots_list").find("#" + id).position().top);
        });
      }
      checkIfEmpty();
      return filterSpots();
    });
  };

  $(function() {
    var filtersFireButton;
    filtersFireButton = null;
    check_cookies();
    $('body').on('click', function(e) {
      if ($(e.target).parents("#filters_map_overlay").length === 0) {
        return $('#map_filters_button').popover('hide');
      }
    });
    $("#map_filters_button").popover({
      trigger: "click",
      placement: "right",
      html: true,
      title: "Setup your filters:",
      content: $("#map_filters").load(STATIC_URL + "filters_popover.html")
    }).on('click', function(e) {
      return $("#map_filters").css('display', 'block');
    });
    $(document).on('click', '#back_to_list', function(e) {
      $("#spot_detail").remove();
      switchColumsClasses('#right_container', '#left_container');
      filtersFireButton.appendTo("#right_container");
      $("#spots_list").show();
      $("#map_canvas").gmap("option", "zoom", 14);
      return $('#map_canvas').gmap('refresh');
    });
    $(document).on('click', 'a.spot-details-link', function(e) {
      var link;
      e.preventDefault();
      link = $(this).attr('href');
      return $("#spots_list").hide(function() {
        $('#left_container').append("<div class='list-group'  id='spot_detail'> <a href='#' class='list-group-item disabled' id='spot_detail_icons'> <i class='fa fa-list fa-2x' id='back_to_list'></i></a> <span class='list-group-item disabled' id='spot_detail_content'> <h4 class='list-group-item-heading'>Spot name</h4> <p class='list-group-item-text'> " + link + "<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br> </p></span> </div>");
        filtersFireButton = $("#filters_map_overlay").detach();
        switchColumsClasses('#left_container', '#right_container');
        $("#map_canvas").gmap("option", "zoom", 17);
        return $('#map_canvas').gmap("refresh");
      });
    });
    $(document).on('click', '#map_filters_button', function(e) {
      return $("#map_filters input.map_filter").each(function() {
        var theCookie;
        theCookie = $.cookie($(this).attr('name'));
        if (theCookie) {
          if (theCookie === "true") {
            $(this).prop('checked', theCookie);
          }
        } else {
          $(this).prop('checked', true);
        }
        return $(this).parent().css('opacity', $(this).prop('checked') === false ? '0.2' : '1');
      });
    });
    $(document).on("change", "#map_filters input.map_filter", function(e) {
      $(this).parent().css('opacity', $(this).prop('checked') === false ? '0.2' : '1');
      $.cookie($(this).attr('name'), $(this).prop('checked'), {
        path: '/map',
        expires: 1
      });
      check_cookies();
      filterSpots();
      return checkIfEmpty();
    });
    return $("#map_canvas").gmap({
      'scrollwheel': false
    }).bind("init", function(evt, map) {
      var options;
      options = {
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 10000000
      };
      return $("#map_canvas").gmap("getCurrentPosition", function(position, status, options) {
        var clientPosition;
        if (status === "OK") {
          clientPosition = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
          currentMapCenter.lat = position.coords.latitude;
          currentMapCenter.lng = position.coords.longitude;
        }
        loadMarkers(clientPosition.lat(), clientPosition.lng());
        $("#map_canvas").gmap("addMarker", {
          position: clientPosition,
          bounds: true,
          is_enabled: ['current_location'],
          spot_type: ['current_location']
        });
        return $("#map_canvas").gmap("option", "zoom", 14);
      });
    });
  });

  $("#map_canvas").on('click', function(e) {
    var clientPosition, new_position, user_zoom_level;
    new_position = $('#map_canvas').gmap('get', 'map').getCenter();
    user_zoom_level = $('#map_canvas').gmap('get', 'map').getZoom();
    if (checkIfNewSpotsShouldBeLoaded(new_position.lat(), new_position.lng(), user_zoom_level)) {
      currentMapCenter.lat = new_position.lat();
      currentMapCenter.lng = new_position.lng();
      currentZoomLevel = $('#map_canvas').gmap('get', 'map').getZoom();
      desiredRadius = Math.floor(currentZoomLevel.getRatioForZoom() / 10 / 2);
      loadMarkers(new_position.lat(), new_position.lng());
      return clientPosition = new google.maps.LatLng(currentMapCenter.lat, currentMapCenter.lng);
    }
  });

  $("#map_canvas").on('click', 'div.rate', function(e) {});

  $("#spots_list").on("click", "span.list-group-item:not(#memo_empty)", function(evt) {
    var id;
    id = $(this).attr("id");
    $("#spots_list span").not("#" + id).removeClass("active");
    $("#spots_list").find("#" + id).addClass("active");
    $("#spots_list").find("#" + id).find('a.spot-details-link').removeClass('disabled');
    $("#map_canvas").gmap("openInfoWindow", {
      position: window.arrMarkers[id].marker.getPosition(),
      content: window.arrMarkers[id].info_window.content
    });
    return $("#map_canvas").gmap("get", "map").panTo(window.arrMarkers[id].marker.getPosition());
  });

}).call(this);
